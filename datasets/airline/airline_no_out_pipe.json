{
  "Input": [
    {
      "method": "load_dataset",
      "input": {
        "sep": ",",
        "compression": "infer"
      },
      "input_koalas": {
        "sep": ",",
        "assume_missing": "True",
        "compression": "gzip"
      },
      "input_vaex": {}
    },
    {
      "method": "force_execution",
      "input": {}
    }
  ],
  "EDA": [
    {
      "method": "get_columns",
      "input": {}
    },
    {
      "method": "get_stats",
      "input": {}
    },
    {
      "method": "locate_null_values",
      "input": {
        "column": "ArrTime"
      },
      "input_spark": {
        "column": ["ArrTime"]
      }
    },
    {
      "method": "locate_outliers",
      "input": {
        "column": ["ArrTime"]
      },
      "input_koalas": {
        "column": "Year"
      },
      "input_spark": {
        "column": ["Year"]
      }
    },
    {
      "method": "search_by_pattern",
      "input": {
        "column": "Origin",
        "pattern": "r'^\\d'"
      }
    },
    {
      "method": "sort",
      "input": {
        "columns": ["Year"]
      }
    },
    {
      "method": "query",
      "input": {
        "query": "DayOfWeek > 3 & DepTime > 1200"
      },
      "input_polars": {
        "query": "[('DayOfWeek', 3), ('DepTime', 1200)]"
      },
      "input_koalas": {
        "query": "DayOfWeek > 3 and DepTime > 1200"
      },
      "input_spark": {
        "query": "DayOfWeek > 3.0 and DepTime > 1200"
      }
    },
    {
      "method": "force_execution",
      "input": {}
    }
  ],
  "data_transformation": [
    {
      "method": "cast_columns_types",
      "input": {
        "dtypes": {
          "FlightNum": "str"
        }
      },
      "input_polars": {
        "dtypes": {
          "FlightNum": "polars.Utf8"
        },
        "req_compile": ["dtypes"],
        "extra_commands": ["import polars"]
      },
      "input_spark": {
        "dtypes": {
          "FlightNum": "string"
        }
      }
    },
    {
      "method": "delete_columns",
      "input": {
        "columns": ["NASDelay", "LateAircraftDelay"]
      }
    },
    {
      "method": "rename_columns",
      "input": {
        "columns": {
          "DepTime": "DepartureTime"
        }
      }
    },
    {
      "method": "calc_column",
      "input": {
        "col_name": "NewCancelled",
        "columns": ["Cancelled", "CancellationCode"],
        "f": "lambda x: 'No' if x[1] == '' or x[0] == '' else 'Yes'"
      },
      "input_polars": {
        "col_name": "NewCancelled",
        "columns": ["Cancelled", "CancellationCode"],
        "f": "lambda x: 'No' if x['CancellationCode'] == '' or x['Cancelled'] == '' else 'Yes'"
      },
      "input_koalas": {
        "col_name": "NewCancelled",
        "f": "lambda x: 'No' if x['CancellationCode'] == '' or x['Cancelled'] == '' else 'Yes'"
      },
      "input_vaex": {
        "col_name": "NewCancelled",
        "columns": ["Cancelled", "CancellationCode"],
        "f": "lambda x, y: 'No' if y == '' or x =='' else 'Yes'"
      },
      "input_spark": {
        "col_name": "NewCancelled",
        "columns": ["Cancelled", "CancellationCode"],
        "f": "lambda x, y: 'No' if y == '' or x =='' else 'Yes'"
      }
    },

    {
      "method": "join",
      "input": {
        "other": "carriers",
        "left_on": "UniqueCarrier",
        "right_on": "Code",
        "how": "left",
        "req_compile": ["other"],
        "extra_commands": [
          "import pandas as pd",
          "carriers=pd.read_csv('datasets/airline/carriers.csv', compression='infer')"
        ]
      },
      "input_modin_dask": {
        "other": "carriers",
        "left_on": "UniqueCarrier",
        "right_on": "Code",
        "how": "left",
        "req_compile": ["other"],
        "extra_commands": [
          "import pandas as pd",
          "carriers=pd.read_csv('datasets/airline/carriers.csv', dtype='object')",
          "import modin.pandas as mpd",
          "carriers=mpd.DataFrame(carriers)"
        ]
      },
      "input_modin_ray": {
        "other": "carriers",
        "left_on": "UniqueCarrier",
        "right_on": "Code",
        "how": "left",
        "req_compile": ["other"],
        "extra_commands": [
          "import pandas as pd",
          "carriers=pd.read_csv('datasets/airline/carriers.csv', dtype='object')",
          "import modin.pandas as mpd",
          "carriers=mpd.DataFrame(carriers)"
        ]
      },
      "input_polars": {
        "other": "carriers",
        "left_on": "UniqueCarrier",
        "right_on": "Code",
        "how": "left",
        "req_compile": ["other"],
        "extra_commands": [
          "import pandas as pd",
          "carriers=pd.read_csv('datasets/airline/carriers.csv', dtype='object')",
          "import polars as pl",
          "carriers=pl.from_pandas(carriers).lazy()"
        ]
      },
      "input_koalas": {
        "other": "carriers",
        "left_on": ["UniqueCarrier"],
        "right_on": ["Code"],
        "how": "left",
        "req_compile": ["other"],
        "extra_commands": [
          "import pyspark.pandas as ks",
          "carriers=ks.read_csv('datasets/airline/carriers.csv')"
        ]
      },
      "input_vaex": {
        "other": "carriers",
        "left_on": "UniqueCarrier",
        "right_on": "Code",
        "how": "left",
        "req_compile": ["other"],
        "extra_commands": [
          "import pandas as pd",
          "carriers=pd.read_csv('datasets/airline/carriers.csv', sep=',', header=0)",
          "import vaex",
          "carriers=vaex.from_pandas(carriers)"
        ]
      },
      "input_rapids": {
        "other": "carriers",
        "left_on": "UniqueCarrier",
        "right_on": "Code",
        "how": "left",
        "req_compile": ["other"],
        "extra_commands": [
          "import pandas as pd",
          "import cudf",
          "carriers=cudf.from_pandas(pd.read_csv('datasets/airline/carriers.csv', sep=','))"
        ]
      },
      "input_spark": {
        "other": "carriers",
        "left_on": ["UniqueCarrier"],
        "right_on": ["Code"],
        "how": "left",
        "req_compile": ["other"],
        "extra_commands": [
          "from pyspark.sql import DataFrame, SparkSession",
          "sparkSession=SparkSession.builder.getOrCreate()",
          "import pandas as pd",
          "carriers=pd.read_csv('datasets/airline/carriers.csv')",
          "from pyspark.sql.types import *",
          "schema = StructType([StructField('Code', StringType(), True), StructField('Description', StringType(), True)])",
          "carriers=sparkSession.createDataFrame(carriers, schema=schema)",
          "carriers.persist()"
        ]
      }
    },
    {
      "method": "pivot",
      "input": {
        "index": ["Year", "Month"],
        "columns": ["UniqueCarrier"],
        "values": ["CarrierDelay"],
        "aggfunc": "sum"
      },
      "input_koalas": {
        "index": ["Year", "Month"],
        "columns": "UniqueCarrier",
        "values": ["CarrierDelay"],
        "aggfunc": "sum"
      },
      "input_vaex": {
        "index": ["Year", "Month"],
        "columns": "UniqueCarrier",
        "values": ["CarrierDelay"],
        "aggfunc": "vaex.agg.count",
        "req_compile": ["aggfunc"],
        "extra_commands": ["import vaex"]
      },
      "input_spark": {
        "index": ["Year", "Month"],
        "columns": "UniqueCarrier",
        "values": "CarrierDelay",
        "aggfunc": "sum"
      },
      "input_modin_dask": {
        "index": ["Year", "Month"],
        "columns": "UniqueCarrier",
        "values": "CarrierDelay",
        "aggfunc": "sum"
      },
      "input_modin_ray": {
        "index": ["Year", "Month"],
        "columns": "UniqueCarrier",
        "values": "CarrierDelay",
        "aggfunc": "sum"
      }
    },
    {
      "method": "one_hot_encoding",
      "input": {
        "columns": ["Diverted", "CancellationCode"]
      },
      "input_vaex": {
        "columns": ["CRSArrTime", "CRSDepTime"]
      },
      "input_spark": {
        "columns": ["CRSArrTime", "CRSDepTime"]
      }
    },
    {
      "method": "categorical_encoding",
      "input": {
        "columns": ["UniqueCarrier"]
      }
    },
    {
      "method": "groupby",
      "input": {
        "columns": ["UniqueCarrier", "Dest"],
        "f": {
          "ArrDelay": "mean"
        }
      }
    },
    {
      "method": "force_execution",
      "input": {}
    }
  ],
  "data_cleaning": [
    {
      "method": "fill_nan",
      "input": {
        "columns": ["WeatherDelay"],
        "value": "NA"
      }
    },
    {
      "method": "delete_empty_rows",
      "input": {
        "columns": ["DepartureTime"]
      }
    },
    {
      "method": "replace",
      "input": {
        "columns": ["UniqueCarrier"],
        "to_replace": "PHL",
        "value": "Phillips Airlines",
        "regex": false
      }
    },
    {
      "method": "change_num_format",
      "input": {
        "formats": { "CarrierDelay": 2 }
      },
      "input_vaex": {
        "formats": { "ArrTime": 2 }
      }
    },
    {
      "method": "set_content_case",
      "input": {
        "columns": ["Dest"],
        "case": "upper"
      }
    },
    {
      "method": "edit",
      "input": {
        "columns": ["SecurityDelay"],
        "func": "lambda x: x * 2"
      },

      "input_polars": {
        "columns": ["SecurityDelay"],
        "func": "lambda x: x * 2"
      },
      "input_koalas": {
        "columns": ["SecurityDelay"],
        "func": "lambda x: x * 2"
      },
      "input_vaex": {
        "columns": ["SecurityDelay"],
        "func": "lambda x: x if not x else x * 2"
      },
      "input_spark": {
        "columns": ["SecurityDelay"],
        "func": "lambda x: x * 2",
        "ret_type": "float"
      }
    },
    {
      "method": "force_execution",
      "input": {}
    }
  ]
}
